;DEPENDENCY DECLARATIONS
declare i32 @printf(i8*, ...)
declare i32 @sprintf(i8*,i8*, ...)
declare i8* @strcat(i8*,i8*)
declare i8* @strcpy(i8*,i8*)
declare i32 @strcmp(i8*,i8*)
@.str.newline = constant [2 x i8] c"\0A\00"
@.str.int = constant [3 x i8] c"%d\00"
@.str.double = constant [4 x i8] c"%lf\00"
@.str.space = constant [2 x i8] c" \00"
;GLOBAL DECLARATIONS

@.str.0 = constant [4 x i8] c"wow\00"
@stgl.arr = global [200 x i8] zeroinitializer
@stgl = global i8* getelementptr inbounds([200 x i8],[200 x i8]* @stgl.arr,i32 0,i32 0)
@.str.1 = constant [4 x i8] c"wow\00"
@.str.2 = constant [8 x i8] c"you are\00"
@.str.3 = constant [3 x i8] c"so\00"
@.str.4 = constant [5 x i8] c"kind\00"
@.str.5 = constant [7 x i8] c"how is\00"
@.str.6 = constant [14 x i8] c"this possible\00"
@.str.7 = constant [10 x i8] c"thank you\00"
@.str.8 = constant [10 x i8] c"very much\00"
@globArrStr = global [2 x [2 x [2 x i8*]]] zeroinitializer
@support14rand8 = global [200 x i8] zeroinitializer
@support17rand94 = global [200 x i8] zeroinitializer
@support21rand786 = global [200 x i8] zeroinitializer
@support24rand761 = global [200 x i8] zeroinitializer
@support29rand849 = global [200 x i8] zeroinitializer
@support32rand254 = global [200 x i8] zeroinitializer
@support36rand902 = global [200 x i8] zeroinitializer
@support39rand562 = global [200 x i8] zeroinitializer
@.str.strtest.ret.arr = global [200 x i8] zeroinitializer
@.str.strtest.ret = global i8* getelementptr inbounds([200 x i8],[200 x i8]* @.str.strtest.ret.arr,i32 0,i32 0)
@.str.9 = constant [10 x i8] c" it works\00"
@.str.10 = constant [54 x i8] c"Here is the string generated by the function strtest:\00"
@.str.11 = constant [46 x i8] c"\0AHere is the global array of strings printed:\00"
@.str.12 = constant [6 x i8] c"first\00"
@.str.13 = constant [7 x i8] c"second\00"
@.str.14 = constant [6 x i8] c"third\00"
@.str.15 = constant [7 x i8] c"fourth\00"
@.str.16 = constant [6 x i8] c"fifth\00"
@.str.17 = constant [5 x i8] c"sixt\00"
@.str.18 = constant [8 x i8] c"seventh\00"
@.str.19 = constant [6 x i8] c"eight\00"
@.str.20 = constant [31 x i8] c"Here is instead the local one:\00"
;GLOBAL INITIALIZATIONS OF GLOBAL VARIABLES THAT ARE STRINGS OR ARRAYS OF STRINGS
define void @globalinit(){
%1 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.0 , i32 0, i32 0
%2= load i8*,i8** @stgl
%3 = call i8* (i8*,i8*) @strcpy(i8* %2,i8* %1)
%4 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.1 , i32 0, i32 0
%5 = getelementptr inbounds [8 x i8], [8 x i8]* @.str.2 , i32 0, i32 0
%6 = getelementptr inbounds [3 x i8], [3 x i8]* @.str.3 , i32 0, i32 0
%7 = getelementptr inbounds [5 x i8], [5 x i8]* @.str.4 , i32 0, i32 0
%8 = getelementptr inbounds [7 x i8], [7 x i8]* @.str.5 , i32 0, i32 0
%9 = getelementptr inbounds [14 x i8], [14 x i8]* @.str.6 , i32 0, i32 0
%10 = getelementptr inbounds [10 x i8], [10 x i8]* @.str.7 , i32 0, i32 0
%11 = getelementptr inbounds [10 x i8], [10 x i8]* @.str.8 , i32 0, i32 0
%12 = getelementptr inbounds [2 x [2 x [2 x i8*]]],[2 x [2 x [2 x i8*]]]* @globArrStr,i32 0,i32 0
%13 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %12,i32 0,i32 0
%14 = getelementptr inbounds [2 x i8*],[2 x i8*]* %13,i32 0,i32 0
%15 = getelementptr inbounds [200 x i8],[200 x i8]* @support14rand8,i32 0,i32 0
%16 = call i8* (i8*,i8*) @strcpy(i8* %15,i8* %4)
store i8* %15,i8** %14
%17 = getelementptr inbounds [2 x i8*],[2 x i8*]* %13,i32 0,i32 1
%18 = getelementptr inbounds [200 x i8],[200 x i8]* @support17rand94,i32 0,i32 0
%19 = call i8* (i8*,i8*) @strcpy(i8* %18,i8* %5)
store i8* %18,i8** %17
%20 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %12,i32 0,i32 1
%21 = getelementptr inbounds [2 x i8*],[2 x i8*]* %20,i32 0,i32 0
%22 = getelementptr inbounds [200 x i8],[200 x i8]* @support21rand786,i32 0,i32 0
%23 = call i8* (i8*,i8*) @strcpy(i8* %22,i8* %6)
store i8* %22,i8** %21
%24 = getelementptr inbounds [2 x i8*],[2 x i8*]* %20,i32 0,i32 1
%25 = getelementptr inbounds [200 x i8],[200 x i8]* @support24rand761,i32 0,i32 0
%26 = call i8* (i8*,i8*) @strcpy(i8* %25,i8* %7)
store i8* %25,i8** %24
%27 = getelementptr inbounds [2 x [2 x [2 x i8*]]],[2 x [2 x [2 x i8*]]]* @globArrStr,i32 0,i32 1
%28 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %27,i32 0,i32 0
%29 = getelementptr inbounds [2 x i8*],[2 x i8*]* %28,i32 0,i32 0
%30 = getelementptr inbounds [200 x i8],[200 x i8]* @support29rand849,i32 0,i32 0
%31 = call i8* (i8*,i8*) @strcpy(i8* %30,i8* %8)
store i8* %30,i8** %29
%32 = getelementptr inbounds [2 x i8*],[2 x i8*]* %28,i32 0,i32 1
%33 = getelementptr inbounds [200 x i8],[200 x i8]* @support32rand254,i32 0,i32 0
%34 = call i8* (i8*,i8*) @strcpy(i8* %33,i8* %9)
store i8* %33,i8** %32
%35 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %27,i32 0,i32 1
%36 = getelementptr inbounds [2 x i8*],[2 x i8*]* %35,i32 0,i32 0
%37 = getelementptr inbounds [200 x i8],[200 x i8]* @support36rand902,i32 0,i32 0
%38 = call i8* (i8*,i8*) @strcpy(i8* %37,i8* %10)
store i8* %37,i8** %36
%39 = getelementptr inbounds [2 x i8*],[2 x i8*]* %35,i32 0,i32 1
%40 = getelementptr inbounds [200 x i8],[200 x i8]* @support39rand562,i32 0,i32 0
%41 = call i8* (i8*,i8*) @strcpy(i8* %40,i8* %11)
store i8* %40,i8** %39
ret void
}

define i8* @strtest (i32 %a){
%1 = alloca i32
store i32 %a, i32* %1
%2= load i32,i32* %1
%3= icmp eq i32 %2,0
br i1 %3, label %if.body.0, label %if.elif.0.0
if.body.0:
%4= load i8*,i8** @stgl
%5 = getelementptr inbounds [10 x i8], [10 x i8]* @.str.9 , i32 0, i32 0
%6= alloca [200 x i8]
%7= getelementptr inbounds [200 x i8],[200 x i8]* %6,i32 0, i32 0
%8 = call i8* (i8*,i8*) @strcpy(i8* %7,i8* %4)
%9 = call i8* (i8*,i8*) @strcat(i8* %7,i8* %5)
%10= alloca i8*
%11= alloca [200 x i8]
%12= getelementptr inbounds [200 x i8],[200 x i8]* %11,i32 0,i32 0
%13= call i8* (i8*,i8*) @strcpy(i8* %12,i8* %9)
store i8* %12,i8** %10
%14= load i8*,i8** %10
%15= load i8*,i8** @.str.strtest.ret
%16= call i8* (i8*,i8*) @strcpy(i8* %15,i8* %14)
ret i8* %15
br label %if.exit.0.0
if.elif.0.0:
br label %if.exit.0.0
if.exit.0.0:
ret i8* getelementptr inbounds([2 x i8],[2 x i8]* @.str.space,i32 0,i32 0)
}
define void @printStr (){
br label %for.init.0
for.init.0:
%1 = alloca i32, align 4
store i32 0,i32* %1
br label %for.cond.0
for.cond.0:
%2 = load i32,i32* %1
%3 = icmp slt i32 %2,2
br i1 %3, label %for.body.0, label %for.exit.0
for.body.0:
br label %for.init.1
for.init.1:
%4 = alloca i32, align 4
store i32 0,i32* %4
br label %for.cond.1
for.cond.1:
%5 = load i32,i32* %4
%6 = icmp slt i32 %5,2
br i1 %6, label %for.body.1, label %for.exit.1
for.body.1:
br label %for.init.2
for.init.2:
%7 = alloca i32, align 4
store i32 0,i32* %7
br label %for.cond.2
for.cond.2:
%8 = load i32,i32* %7
%9 = icmp slt i32 %8,2
br i1 %9, label %for.body.2, label %for.exit.2
for.body.2:
%10= load i32,i32* %1
%11 = getelementptr inbounds [2 x [2 x [2 x i8*]]],[2 x [2 x [2 x i8*]]]* @globArrStr, i32 0, i32 %10
%12= load i32,i32* %4
%13 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %11, i32 0, i32 %12
%14= load i32,i32* %7
%15 = getelementptr inbounds [2 x i8*],[2 x i8*]* %13, i32 0, i32 %14
%16= load i8*,i8** %15
%17 = call i32 (i8*, ...) @printf(i8* %16)
%18= call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8],[2 x i8]* @.str.space,i32 0,i32 0))
br label %for.inc.2
for.inc.2:
%19 = load i32,i32* %7
%20 = add nsw i32 %19,1
store i32 %20,i32* %7
br label %for.cond.2
for.exit.2:
%21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
br label %for.inc.1
for.inc.1:
%22 = load i32,i32* %4
%23 = add nsw i32 %22,1
store i32 %23,i32* %4
br label %for.cond.1
for.exit.1:
%24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
br label %for.inc.0
for.inc.0:
%25 = load i32,i32* %1
%26 = add nsw i32 %25,1
store i32 %26,i32* %1
br label %for.cond.0
for.exit.0:
ret void
}
define void @printStrLocal (i8** %arrStr,i32 %dim.0.0,i32 %dim.0.1){
%1 = alloca i8**
store i8** %arrStr, i8*** %1
br label %for.init.3
for.init.3:
%2 = alloca i32, align 4
store i32 0,i32* %2
br label %for.cond.3
for.cond.3:
%3 = load i32,i32* %2
%4 = icmp slt i32 %3,2
br i1 %4, label %for.body.3, label %for.exit.3
for.body.3:
br label %for.init.4
for.init.4:
%5 = alloca i32, align 4
store i32 0,i32* %5
br label %for.cond.4
for.cond.4:
%6 = load i32,i32* %5
%7 = icmp slt i32 %6,2
br i1 %7, label %for.body.4, label %for.exit.4
for.body.4:
br label %for.init.5
for.init.5:
%8 = alloca i32, align 4
store i32 0,i32* %8
br label %for.cond.5
for.cond.5:
%9 = load i32,i32* %8
%10 = icmp slt i32 %9,2
br i1 %10, label %for.body.5, label %for.exit.5
for.body.5:
%11= load i32,i32* %2
%12= mul i32 %dim.0.0,%11
%13= mul i32 %12,%dim.0.1
%14= load i32,i32* %5
%15= mul i32 %dim.0.1,%14
%16= add nsw i32 %15,%13
%17= load i32,i32* %8
%18= add nsw i32 %17,%16
%19= load i8**,i8*** %1
%20= getelementptr inbounds i8*,i8** %19, i32 %18
%21= load i8*,i8** %20
%22 = call i32 (i8*, ...) @printf(i8* %21)
%23= call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8],[2 x i8]* @.str.space,i32 0,i32 0))
br label %for.inc.5
for.inc.5:
%24 = load i32,i32* %8
%25 = add nsw i32 %24,1
store i32 %25,i32* %8
br label %for.cond.5
for.exit.5:
%26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
br label %for.inc.4
for.inc.4:
%27 = load i32,i32* %5
%28 = add nsw i32 %27,1
store i32 %28,i32* %5
br label %for.cond.4
for.exit.4:
%29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
br label %for.inc.3
for.inc.3:
%30 = load i32,i32* %2
%31 = add nsw i32 %30,1
store i32 %31,i32* %2
br label %for.cond.3
for.exit.3:
ret void
}
define void @main (){
call void () @globalinit()
%1 = getelementptr inbounds [54 x i8], [54 x i8]* @.str.10 , i32 0, i32 0
%2 = call i32 (i8*, ...) @printf(i8* %1)
%3= call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8],[2 x i8]* @.str.space,i32 0,i32 0))
%4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
%5=call i8* (i32) @strtest(i32 0)
%6 = call i32 (i8*, ...) @printf(i8* %5)
%7= call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8],[2 x i8]* @.str.space,i32 0,i32 0))
%8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
%9 = getelementptr inbounds [46 x i8], [46 x i8]* @.str.11 , i32 0, i32 0
%10 = call i32 (i8*, ...) @printf(i8* %9)
%11= call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8],[2 x i8]* @.str.space,i32 0,i32 0))
%12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
call void () @printStr()
%13 = getelementptr inbounds [6 x i8], [6 x i8]* @.str.12 , i32 0, i32 0
%14 = getelementptr inbounds [7 x i8], [7 x i8]* @.str.13 , i32 0, i32 0
%15 = getelementptr inbounds [6 x i8], [6 x i8]* @.str.14 , i32 0, i32 0
%16 = getelementptr inbounds [7 x i8], [7 x i8]* @.str.15 , i32 0, i32 0
%17 = getelementptr inbounds [6 x i8], [6 x i8]* @.str.16 , i32 0, i32 0
%18 = getelementptr inbounds [5 x i8], [5 x i8]* @.str.17 , i32 0, i32 0
%19 = getelementptr inbounds [8 x i8], [8 x i8]* @.str.18 , i32 0, i32 0
%20 = getelementptr inbounds [6 x i8], [6 x i8]* @.str.19 , i32 0, i32 0
%21= alloca [2 x [2 x [2 x i8*]]]
%22 = getelementptr inbounds [2 x [2 x [2 x i8*]]],[2 x [2 x [2 x i8*]]]* %21,i32 0,i32 0
%23 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %22,i32 0,i32 0
%24 = getelementptr inbounds [2 x i8*],[2 x i8*]* %23,i32 0,i32 0
%25 = alloca [200 x i8]
%26 = getelementptr inbounds [200 x i8],[200 x i8]* %25,i32 0,i32 0
%27 = call i8* (i8*,i8*) @strcpy(i8* %26,i8* %13)
store i8* %26,i8** %24
%28 = getelementptr inbounds [2 x i8*],[2 x i8*]* %23,i32 0,i32 1
%29 = alloca [200 x i8]
%30 = getelementptr inbounds [200 x i8],[200 x i8]* %29,i32 0,i32 0
%31 = call i8* (i8*,i8*) @strcpy(i8* %30,i8* %14)
store i8* %30,i8** %28
%32 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %22,i32 0,i32 1
%33 = getelementptr inbounds [2 x i8*],[2 x i8*]* %32,i32 0,i32 0
%34 = alloca [200 x i8]
%35 = getelementptr inbounds [200 x i8],[200 x i8]* %34,i32 0,i32 0
%36 = call i8* (i8*,i8*) @strcpy(i8* %35,i8* %15)
store i8* %35,i8** %33
%37 = getelementptr inbounds [2 x i8*],[2 x i8*]* %32,i32 0,i32 1
%38 = alloca [200 x i8]
%39 = getelementptr inbounds [200 x i8],[200 x i8]* %38,i32 0,i32 0
%40 = call i8* (i8*,i8*) @strcpy(i8* %39,i8* %16)
store i8* %39,i8** %37
%41 = getelementptr inbounds [2 x [2 x [2 x i8*]]],[2 x [2 x [2 x i8*]]]* %21,i32 0,i32 1
%42 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %41,i32 0,i32 0
%43 = getelementptr inbounds [2 x i8*],[2 x i8*]* %42,i32 0,i32 0
%44 = alloca [200 x i8]
%45 = getelementptr inbounds [200 x i8],[200 x i8]* %44,i32 0,i32 0
%46 = call i8* (i8*,i8*) @strcpy(i8* %45,i8* %17)
store i8* %45,i8** %43
%47 = getelementptr inbounds [2 x i8*],[2 x i8*]* %42,i32 0,i32 1
%48 = alloca [200 x i8]
%49 = getelementptr inbounds [200 x i8],[200 x i8]* %48,i32 0,i32 0
%50 = call i8* (i8*,i8*) @strcpy(i8* %49,i8* %18)
store i8* %49,i8** %47
%51 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %41,i32 0,i32 1
%52 = getelementptr inbounds [2 x i8*],[2 x i8*]* %51,i32 0,i32 0
%53 = alloca [200 x i8]
%54 = getelementptr inbounds [200 x i8],[200 x i8]* %53,i32 0,i32 0
%55 = call i8* (i8*,i8*) @strcpy(i8* %54,i8* %19)
store i8* %54,i8** %52
%56 = getelementptr inbounds [2 x i8*],[2 x i8*]* %51,i32 0,i32 1
%57 = alloca [200 x i8]
%58 = getelementptr inbounds [200 x i8],[200 x i8]* %57,i32 0,i32 0
%59 = call i8* (i8*,i8*) @strcpy(i8* %58,i8* %20)
store i8* %58,i8** %56
%60 = getelementptr inbounds [31 x i8], [31 x i8]* @.str.20 , i32 0, i32 0
%61 = call i32 (i8*, ...) @printf(i8* %60)
%62= call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8],[2 x i8]* @.str.space,i32 0,i32 0))
%63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds([2 x i8], [2 x i8]* @.str.newline, i32 0, i32 0))
%64 = getelementptr inbounds [2 x [2 x [2 x i8*]]],[2 x [2 x [2 x i8*]]]* %21,i32 0,i32 0
%65 = getelementptr inbounds [2 x [2 x i8*]],[2 x [2 x i8*]]* %64,i32 0,i32 0
%66 = getelementptr inbounds [2 x i8*],[2 x i8*]* %65,i32 0,i32 0
call void (i8**,i32,i32) @printStrLocal(i8** %66,i32 2,i32 2)
ret void
}

